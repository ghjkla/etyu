int red = 11;
const int buttonPin = 3; 
int green = 9;
int buzzer = 13;
int sensor = 2;
int n = 0;
int a = 60;
unsigned long previousMillis = 0;     
const long interval = 1000;        
int buttonState = 0;  
int startbutton = 4;
int digit1 = 45; //세그먼트 자릿수 결정
int digit2 = 47; 
int digit3 = 49; 
int digit4 = 51;
int segA = 31;
int segB = 33; 
int segC = 35; 
int segD = 37;
int segE = 39;
int segF = 41;
int segG = 43;
int segDP = 53;
int touch = 0;
int del = 55;
int timecheck = 60;

void setup() {
  Serial.begin(9600);
  pinMode(buzzer, OUTPUT); 
  pinMode(red, OUTPUT);
  pinMode(sensor, INPUT_PULLUP);
  pinMode(buttonPin, INPUT_PULLUP);
  pinMode(startbutton, INPUT_PULLUP);
  pinMode(segA, OUTPUT); 
  pinMode(segB, OUTPUT); 
  pinMode(segC, OUTPUT); 
  pinMode(segD, OUTPUT); 
  pinMode(segE, OUTPUT); 
  pinMode(segF, OUTPUT); 
  pinMode(segG, OUTPUT); 
  pinMode(digit1, OUTPUT); 
  pinMode(digit2, OUTPUT); 
  pinMode(digit3, OUTPUT); 
  pinMode(digit4, OUTPUT); 
  pinMode(segDP, OUTPUT); 
}

  void pickDigit(int x)  // 바꿔줄 자리수 출력
{
  digitalWrite(digit1, LOW);
  digitalWrite(digit2, LOW);
  digitalWrite(digit3, LOW);
  digitalWrite(digit4, LOW);
 
  switch(x)
  {
  case 1: 
    digitalWrite(digit1, HIGH); 
    break;
  case 2: 
    digitalWrite(digit2, HIGH); 
    break;
  case 3: 
    digitalWrite(digit3, HIGH); 
    break;
  default: 
    digitalWrite(digit4, HIGH); 
    break;
  }
}

 
void loop() {
  clearLEDs();
pickDigit(1);
  pickNumber(touch/10);
  delayMicroseconds(del);
 
  pickDigit(2);
  pickNumber(touch%10);
  delayMicroseconds(del);
 
  pickDigit(3);
  pickNumber((timecheck/10));
  delayMicroseconds(del);

  pickDigit(4);
  pickNumber(timecheck%10);
  delayMicroseconds(del);

  int sensorVal = digitalRead(sensor);
  Serial.println(a);
  if (sensorVal == LOW) {
      digitalWrite(buzzer, HIGH);
    digitalWrite(red, HIGH); 
    delay(1000);
  } 
  else {
        digitalWrite(buzzer, LOW);
    digitalWrite(red, LOW); 
  }
  
 buttonState = digitalRead(buttonPin);
    if (buttonState == LOW) {
   a = a + 1;
   delay(250);
  } else {
   a = a;

  }

    unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
      digitalWrite(buzzer, HIGH);
      n = n + 1;
      timecheck = timecheck - 1;
      delay(100);
    if (n == a) {
      digitalWrite(buzzer, HIGH);
      digitalWrite(red, HIGH);
        delay(4000);
    } else {
     digitalWrite(buzzer, LOW);
    digitalWrite(red, LOW); 
    }
  }
}

 

 void pickNumber(int x)
{
  switch(x)
  {
  case 0:
    zero();
    break;
  case 1: 
    one(); 
    break;
  case 2: 
    two(); 
    break;
  case 3: 
    three(); 
    break;
  case 4: 
    four(); 
    break;
  case 5: 
    five(); 
    break;
  case 6: 
    six(); 
    break;
  case 7: 
    seven(); 
    break;
  case 8: 
    eight(); 
    break;
  case 9: 
    nine(); 
    break;
  }
}
 void clearLEDs()  
{
  digitalWrite(segA, HIGH);
  digitalWrite(segB, HIGH);
  digitalWrite(segC, HIGH);
  digitalWrite(segD, HIGH);
  digitalWrite(segE, HIGH);
  digitalWrite(segF, HIGH);
  digitalWrite(segF, HIGH);
  digitalWrite(segG, HIGH);
}
void zero()
{
      digitalWrite(segA, LOW); 
      digitalWrite(segB, LOW); 
      digitalWrite(segC, LOW); 
      digitalWrite(segD, LOW); 
      digitalWrite(segE, LOW); 
      digitalWrite(segF, LOW); 
      digitalWrite(segG, HIGH); 
}
    void one()
    { 
      digitalWrite(segA, HIGH); 
      digitalWrite(segB, LOW); 
      digitalWrite(segC, LOW); 
      digitalWrite(segD, HIGH); 
      digitalWrite(segE, HIGH); 
      digitalWrite(segF, HIGH); 
      digitalWrite(segG, HIGH); 
    }
   void two()
   {
      digitalWrite(segA, LOW); 
      digitalWrite(segB, LOW); 
      digitalWrite(segC, HIGH); 
      digitalWrite(segD, LOW); 
      digitalWrite(segE, LOW); 
      digitalWrite(segF, HIGH); 
      digitalWrite(segG, LOW); 
   }
    void three()
    { 
      digitalWrite(segA, LOW); 
      digitalWrite(segB, LOW); 
      digitalWrite(segC, LOW); 
      digitalWrite(segD, LOW); 
      digitalWrite(segE, HIGH); 
      digitalWrite(segF, HIGH); 
      digitalWrite(segG, LOW);  
    }
    void four()
    { 
      digitalWrite(segA, HIGH); 
      digitalWrite(segB, LOW); 
      digitalWrite(segC, LOW); 
      digitalWrite(segD, HIGH); 
      digitalWrite(segE, HIGH); 
      digitalWrite(segF, LOW); 
      digitalWrite(segG, LOW); 
    }
    void five()
    { 
      digitalWrite(segA, LOW); 
      digitalWrite(segB, HIGH); 
      digitalWrite(segC, LOW); 
      digitalWrite(segD, LOW); 
      digitalWrite(segE, HIGH); 
      digitalWrite(segF, LOW); 
      digitalWrite(segG, LOW); 
    }
    void six()
    { 
      digitalWrite(segA, LOW); 
      digitalWrite(segB, HIGH); 
      digitalWrite(segC, LOW); 
      digitalWrite(segD, LOW); 
      digitalWrite(segE, LOW); 
      digitalWrite(segF, LOW); 
      digitalWrite(segG, LOW); 
    }
    void seven()
    {
      digitalWrite(segA, LOW); 
      digitalWrite(segB, LOW); 
      digitalWrite(segC, LOW); 
      digitalWrite(segD, HIGH); 
      digitalWrite(segE, HIGH); 
      digitalWrite(segF, HIGH); 
      digitalWrite(segG, HIGH); 
    }
    void eight()
    {
      digitalWrite(segA, LOW); 
      digitalWrite(segB, LOW); 
      digitalWrite(segC, LOW); 
      digitalWrite(segD, LOW); 
      digitalWrite(segE, LOW); 
      digitalWrite(segF, LOW); 
      digitalWrite(segG, LOW); 
    }
    void nine()
    { 
      digitalWrite(segA, LOW); 
      digitalWrite(segB, LOW); 
      digitalWrite(segC, LOW); 
      digitalWrite(segD, LOW); 
      digitalWrite(segE, HIGH); 
      digitalWrite(segF, LOW); 
      digitalWrite(segG, LOW); 
    } 


